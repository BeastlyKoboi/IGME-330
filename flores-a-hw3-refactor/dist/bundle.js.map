{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://flores-a-hw2/./src/utils.ts","webpack://flores-a-hw2/./src/audio.ts","webpack://flores-a-hw2/./src/classes/Sprite.ts","webpack://flores-a-hw2/./src/visualizer.ts","webpack://flores-a-hw2/./src/main.ts","webpack://flores-a-hw2/./src/navbar.ts","webpack://flores-a-hw2/./src/loader.ts"],"sourcesContent":["import { colorStop } from \"./interfaces/colorStop.interface\";\r\n\r\nconst makeColor = (red: number, green: number, blue: number, alpha = 1) => {\r\n    return `rgba(${red},${green},${blue},${alpha})`;\r\n};\r\n\r\nconst getRandom = (min: number, max: number) => {\r\n    return Math.random() * (max - min) + min;\r\n};\r\n\r\nconst getRandomColor = () => {\r\n    const floor = 35; // so that colors are not too bright or too dark \r\n    const getByte = () => getRandom(floor, 255 - floor);\r\n    return `rgba(${getByte()},${getByte()},${getByte()},1)`;\r\n};\r\n\r\nconst getLinearGradient = (ctx: CanvasRenderingContext2D, startX: number, startY: number, endX: number, endY: number, colorStops: colorStop[]) => {\r\n    let lg = ctx.createLinearGradient(startX, startY, endX, endY);\r\n    for (let stop of colorStops) {\r\n        lg.addColorStop(stop.percent, stop.color);\r\n    }\r\n    return lg;\r\n};\r\n\r\nconst drawSquare = (ctx: CanvasRenderingContext2D, x: number, y: number, width: number, height: number, rotation: number, scale: number, fillStyle: string) => {\r\n    ctx.save();  // save the old state attributes\r\n    ctx.fillStyle = fillStyle;\r\n    ctx.translate(x, y);\r\n    ctx.rotate(rotation);\r\n    ctx.scale(scale, scale);\r\n    // now we'll draw from the center to get the rotation right\r\n    ctx.fillRect(0 - width / 2, 0 - height / 2, width, height);\r\n    ctx.restore();\r\n}\r\n\r\nconst drawCircle = (ctx: CanvasRenderingContext2D, x: number, y: number, radius: number, color: string, scale = 1) => {\r\n    ctx.save();\r\n    ctx.fillStyle = color;\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, radius * scale, 0, Math.PI * 2);\r\n    ctx.closePath();\r\n    ctx.fill();\r\n    ctx.restore();\r\n}\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\r\nconst goFullscreen = (element: HTMLCanvasElement) => {\r\n    if (element.requestFullscreen)\r\n        element.requestFullscreen();\r\n};\r\n\r\nconst loadJSON = (url: string, callback) => {\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.onload = callback;\r\n    xhr.onerror = e => console.log(`In onerror - HTTP Status Code = ${(e.target as XMLHttpRequest).status}`);\r\n    xhr.open(\"GET\", url);\r\n    xhr.send();\r\n};\r\n\r\nexport {\r\n    makeColor, getRandomColor, getLinearGradient,\r\n    drawSquare, drawCircle,\r\n    goFullscreen, loadJSON\r\n};","// 1 - our WebAudio context, **we will export and make this public at the bottom of the file**\r\nlet audioCtx: AudioContext;\r\n// **These are \"private\" properties - these will NOT be visible outside of this module (i.e. file)**\r\n// 2 - WebAudio nodes that are part of our WebAudio audio routing graph\r\nlet element: HTMLAudioElement,\r\n    sourceNode: MediaElementAudioSourceNode,\r\n    analyserNode: AnalyserNode,\r\n    distortionFilter: WaveShaperNode,\r\n    reverbNode: ConvolverNode,\r\n    gainNode: GainNode;\r\n\r\n// 3 - here we are faking an enumeration\r\nconst DEFAULTS = Object.seal({\r\n    gain: .5,\r\n    numSamples: 256,\r\n    hasReverb: true,\r\n});\r\nlet hasReverb: boolean;\r\n\r\n// **Next are \"public\" methods - we are going to export all of these at the bottom of this file**\r\nconst setupWebaudio = async (filePath: string, impulseResponseURL: string) => {\r\n    // The || is because WebAudio has not been standardized across browsers yet\r\n    const AudioContext = window.AudioContext;\r\n    audioCtx = new AudioContext();\r\n\r\n    // this creates an <audio> element\r\n    element = new Audio();\r\n\r\n    // have it point at a sound file\r\n    loadSoundFile(filePath);\r\n\r\n    // create an a source node that points at the <audio> element\r\n    sourceNode = audioCtx.createMediaElementSource(element);\r\n\r\n    // create an analyser node\r\n    // note the UK spelling of \"Analyser\"\r\n    analyserNode = audioCtx.createAnalyser();\r\n\r\n    /*\r\n    // \r\n    We will request DEFAULTS.numSamples number of samples or \"bins\" spaced equally \r\n    across the sound spectrum.\r\n    \r\n    If DEFAULTS.numSamples (fftSize) is 256, then the first bin is 0 Hz, the second is 172 Hz, \r\n    the third is 344Hz, and so on. Each bin contains a number between 0-255 representing \r\n    the amplitude of that frequency.\r\n    */\r\n\r\n    // fft stands for Fast Fourier Transform\r\n    analyserNode.fftSize = DEFAULTS.numSamples;\r\n\r\n    // Create distortion node\r\n    distortionFilter = audioCtx.createWaveShaper();\r\n\r\n    // create a gain (volume) node\r\n    gainNode = audioCtx.createGain();\r\n    gainNode.gain.value = DEFAULTS.gain;\r\n\r\n    //\r\n    reverbNode = await createReverb(impulseResponseURL);\r\n\r\n    hasReverb = DEFAULTS.hasReverb;\r\n\r\n    // connect the nodes - we now have an audio graph\r\n    if (hasReverb) {\r\n        sourceNode.connect(reverbNode);\r\n        reverbNode.connect(distortionFilter);\r\n        distortionFilter.connect(analyserNode);\r\n        analyserNode.connect(gainNode);\r\n        gainNode.connect(audioCtx.destination);\r\n    }\r\n    else {\r\n        sourceNode.connect(distortionFilter);\r\n        distortionFilter.connect(analyserNode);\r\n        analyserNode.connect(gainNode);\r\n        gainNode.connect(audioCtx.destination);\r\n    }\r\n};\r\n\r\n\r\nconst loadSoundFile = (filepath: string) => {\r\n    element.src = filepath;\r\n};\r\n\r\nconst playCurrentSound = () => {\r\n    element.play();\r\n};\r\n\r\nconst pauseCurrentSound = () => {\r\n    element.pause();\r\n};\r\n\r\nconst setVolume = (value: number) => {\r\n    gainNode.gain.value = value;\r\n};\r\n\r\nconst setDistortion = (value: number) => {\r\n    if (value) {\r\n        distortionFilter.curve = makeDistortionCurve(value);\r\n    }\r\n    else\r\n        distortionFilter.curve = null;\r\n};\r\n\r\nconst toggleReverb = () => {\r\n    if (hasReverb) {\r\n        sourceNode.disconnect(reverbNode);\r\n        reverbNode.disconnect(distortionFilter);\r\n        sourceNode.connect(distortionFilter);\r\n        hasReverb = false;\r\n    }\r\n    else {\r\n        sourceNode.disconnect(distortionFilter);\r\n        sourceNode.connect(reverbNode);\r\n        reverbNode.connect(distortionFilter);\r\n        hasReverb = true;\r\n    }\r\n}\r\n\r\nconst makeDistortionCurve = (amount = 20) => {\r\n    let n_samples = 256, curve = new Float32Array(n_samples);\r\n    for (let i = 0; i < n_samples; ++i) {\r\n        let x = i * 2 / n_samples - 1;\r\n        curve[i] = (Math.PI + amount) * x / (Math.PI + amount * Math.abs(x));\r\n        //curve[i] = x; // does not modify sound\r\n        //curve[i] = 0; // silence\r\n        //curve[i] = x * amount; // classic distortion\r\n        //curve[i] = (Math.PI + amount) * x / (Math.PI + amount * Math.abs(x));\r\n        // curve[i] =(Math.PI + 100 * x/2) / (Math.PI + 100 * Math.abs(x)); // nice distortion\r\n        //curve[i] = -(Math.PI + 100 * x/2) / (Math.PI + 50 * Math.abs(x));\r\n        //\t\t\t\r\n        // curve[i] = Math.random() * 2 - 1;\t// static!\t\r\n        //curve[i] = x * 5 + Math.random() * 2 - 1; // adds a less intrusive static to the audio\r\n        // curve[i] = x * Math.sin(x) * amount/5; // sounds like a cross between Donald Duck and Cartman from South Park\r\n\r\n        // curve[i] = (3 + 20) * x * 57 * (Math.PI / 180) / (Math.PI + 20 * Math.abs(x)) // from the stack overflow post\r\n    }\r\n    return curve;\r\n}\r\n\r\nconst createReverb = async (url: string) => {\r\n    let convolver = audioCtx.createConvolver();\r\n\r\n    // load impulse response from file\r\n    let response = await fetch(url);\r\n    let arraybuffer = await response.arrayBuffer();\r\n    convolver.buffer = await audioCtx.decodeAudioData(arraybuffer);\r\n\r\n    return convolver;\r\n};\r\n\r\nexport { audioCtx, setupWebaudio, playCurrentSound, pauseCurrentSound, loadSoundFile, setVolume, setDistortion, toggleReverb, analyserNode, DEFAULTS }\r\n\r\n","import * as utils from '../utils';\r\n\r\nexport default class Sprite {\r\n    type: string;\r\n    pivotX: number;\r\n    pivotY: number;\r\n    radius: number;\r\n    rotation: number;\r\n    rotRadius: number; \r\n    color: string;\r\n    speed: number;\r\n    x: number;\r\n    y: number;\r\n    scale: number; \r\n\r\n    constructor({ type, pivotX, pivotY, radius, rotation, rotRadius, color, speed = 10 }) {\r\n        Object.assign(this, { type, pivotX, pivotY, radius, rotation, rotRadius, color, speed })\r\n        this.x = this.pivotX + Math.cos(this.rotation) * this.rotRadius;\r\n        this.y = this.pivotY + Math.sin(this.rotation) * this.rotRadius;\r\n        this.scale = 1;\r\n    }\r\n\r\n    update(scale: number) {\r\n        this.scale = scale;\r\n        this.rotation += .01 * this.speed;\r\n        if (this.rotation > 360)\r\n            this.rotation -= 360;\r\n        this.x = this.pivotX + Math.cos(this.rotation) * this.rotRadius * this.scale;\r\n        this.y = this.pivotY + Math.sin(this.rotation) * this.rotRadius * this.scale;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n        switch (this.type) {\r\n            case \"circle\":\r\n                utils.drawCircle(ctx, this.x, this.y, this.radius, this.color, this.scale);\r\n                break;\r\n        }\r\n        ctx.restore();\r\n    }\r\n}","import * as utils from './utils';\r\nimport Sprite from './classes/Sprite';\r\nimport { DrawParams } from './interfaces/drawParams.interface';\r\n\r\nlet ctx: CanvasRenderingContext2D;\r\nlet canvasWidth: number;\r\nlet canvasHeight: number;\r\nlet analyserNode: AnalyserNode;\r\nlet audioData: Uint8Array;\r\n\r\nlet layer1Sprites: Sprite[] = [];\r\nlet layer2Sprites: Sprite[] = [];\r\nlet layer3Sprites: Sprite[] = [];\r\nlet layer4Sprites: Sprite[] = [];\r\nlet allSprites = [];\r\n\r\nlet layerColors = [];\r\n\r\nconst setupCanvas = (canvasElement: HTMLCanvasElement, analyserNodeRef: AnalyserNode, startLayerColors: any[]) => {\r\n    // create drawing context\r\n    ctx = canvasElement.getContext(\"2d\");\r\n    canvasWidth = canvasElement.width;\r\n    canvasHeight = canvasElement.height;\r\n\r\n    ctx.globalCompositeOperation = \"source-over\";\r\n\r\n    // keep a reference to the analyser node\r\n    analyserNode = analyserNodeRef;\r\n    // this is the array where the analyser data will be stored\r\n    audioData = new Uint8Array(analyserNode.fftSize / 2);\r\n\r\n    layerColors = startLayerColors;\r\n\r\n    setupSprites();\r\n}\r\n\r\nconst setupSprites = () => {\r\n\r\n    // layer 1\r\n    for (let i = 0; i < 5; i++) {\r\n        layer1Sprites.push(new Sprite({\r\n            type: \"circle\",\r\n            pivotX: canvasWidth / 2,\r\n            pivotY: canvasHeight / 2,\r\n            radius: 50,\r\n            rotation: Math.PI * 2 * i / 5,\r\n            rotRadius: 200,\r\n            color: layerColors[0],\r\n            speed: 10\r\n        }));\r\n    }\r\n    for (let i = 0; i < 5; i++) {\r\n        layer2Sprites.push(new Sprite({\r\n            type: \"circle\",\r\n            pivotX: canvasWidth / 2,\r\n            pivotY: canvasHeight / 2,\r\n            radius: 50,\r\n            rotation: Math.PI * 2 * i / 5,\r\n            rotRadius: 300,\r\n            color: layerColors[1],\r\n            speed: -10\r\n        }));\r\n    }\r\n    for (let i = 0; i < 5; i++) {\r\n        layer3Sprites.push(new Sprite({\r\n            type: \"circle\",\r\n            pivotX: canvasWidth / 2,\r\n            pivotY: canvasHeight / 2,\r\n            radius: 50,\r\n            rotation: Math.PI * 2 * i / 5,\r\n            rotRadius: 400,\r\n            color: layerColors[2],\r\n            speed: 10\r\n        }));\r\n    }\r\n    for (let i = 0; i < 5; i++) {\r\n        layer4Sprites.push(new Sprite({\r\n            type: \"circle\",\r\n            pivotX: canvasWidth / 2,\r\n            pivotY: canvasHeight / 2,\r\n            radius: 50,\r\n            rotation: Math.PI * 2 * i / 5,\r\n            rotRadius: 500,\r\n            color: layerColors[3],\r\n            speed: -10\r\n        }));\r\n    }\r\n\r\n    allSprites = [layer1Sprites, layer2Sprites, layer3Sprites, layer4Sprites];\r\n\r\n};\r\n\r\nconst draw = (params: DrawParams) => {\r\n    // populate the audioData array with the frequency data from the analyserNode\r\n    // notice these arrays are passed \"by reference\" \r\n\r\n    if (params.useFrequencyData)\r\n        analyserNode.getByteFrequencyData(audioData);\r\n    else if (params.useWaveformData)\r\n        analyserNode.getByteTimeDomainData(audioData);\r\n\r\n    // draw background\r\n    ctx.save();\r\n    ctx.fillStyle = \"black\";\r\n    ctx.globalAlpha = .1;\r\n    ctx.fillRect(0, 0, canvasWidth, canvasHeight);\r\n    ctx.restore();\r\n\r\n    ctx.globalCompositeOperation = \"lighter\";\r\n    let newScale = audioData[audioData.length / 4 - 1] / 128;\r\n    for (let sprite of layer1Sprites) {\r\n        sprite.update(newScale);\r\n        sprite.draw(ctx);\r\n    }\r\n\r\n    newScale = audioData[2 * audioData.length / 4 - 1] / 128;\r\n    for (let sprite of layer2Sprites) {\r\n        sprite.update(newScale);\r\n        sprite.draw(ctx);\r\n    }\r\n\r\n    newScale = audioData[3 * audioData.length / 4 - 1] / 128;\r\n    for (let sprite of layer3Sprites) {\r\n        sprite.update(newScale);\r\n        sprite.draw(ctx);\r\n    }\r\n\r\n    newScale = audioData[4 * audioData.length / 4 - 1] / 128;\r\n    for (let sprite of layer3Sprites) {\r\n        sprite.update(newScale);\r\n        sprite.draw(ctx);\r\n    }\r\n\r\n    ctx.globalCompositeOperation = \"source-over\";\r\n\r\n    // \r\n    utils.drawCircle(ctx, canvasWidth / 2, canvasHeight / 2, 200, \"black\");\r\n    utils.drawCircle(ctx, canvasWidth / 2, canvasHeight / 2, 190, \"white\");\r\n\r\n    // \r\n    if (params.showBars) {\r\n        const BAR_WIDTH = 6;\r\n        const MAX_BAR_HEIGHT = 100;\r\n        const PADDING = 3.5;\r\n        const RADIUS = (audioData.length * (BAR_WIDTH + PADDING) / (2 * Math.PI));\r\n\r\n        ctx.fillStyle = \"black\";\r\n        ctx.save();\r\n        ctx.translate(canvasWidth / 2,\r\n            canvasHeight / 2 - RADIUS);\r\n\r\n        for (let i = 0, value: number; i < audioData.length; i++) {\r\n            value = audioData[i];\r\n            let percent = value / 255;\r\n            if (percent < .02) percent = 0.02;\r\n            ctx.translate(BAR_WIDTH, 0); // move to right\r\n            ctx.rotate(Math.PI * 2 / audioData.length);\r\n            ctx.save();\r\n            ctx.scale(1, 1);\r\n            ctx.fillRect(0, 0, BAR_WIDTH, MAX_BAR_HEIGHT * percent);\r\n            ctx.restore();\r\n            ctx.translate(PADDING, 0);\r\n        }\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n\r\n    // draw circles\r\n    if (params.showCircles) {\r\n        let maxRadius = canvasHeight / 4;\r\n        ctx.save();\r\n        ctx.globalAlpha = 0.5;\r\n        for (let i = 0; i < audioData.length; i++) {\r\n            // red-ish circles\r\n            let percent = audioData[i] / 255;\r\n\r\n            let circleRadius = percent * maxRadius;\r\n            ctx.beginPath();\r\n            // ctx.fillStyle = utils.makeColor(255, 111, 111, .34 - percent / 3.0);\r\n            ctx.fillStyle = utils.makeColor(0, 255, 255, .34 - percent / 3.0);\r\n            ctx.arc(canvasWidth / 2, canvasHeight / 2, circleRadius, 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n\r\n            // blue-ish circles, bigger, more transparent \r\n            ctx.beginPath();\r\n            // ctx.fillStyle = utils.makeColor(0, 0, 255, .10 - percent / 10.0);\r\n            ctx.fillStyle = utils.makeColor(200, 200, 200, .10 - percent / 10.0);\r\n            ctx.arc(canvasWidth / 2, canvasHeight / 2, circleRadius * 1.5, 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n\r\n            // yellow-ish circles, smaller \r\n            ctx.save();\r\n            ctx.beginPath();\r\n            // ctx.fillStyle = utils.makeColor(200, 200, 0, .5 - percent / 5.0);\r\n            ctx.fillStyle = utils.makeColor(0, 0, 255, .5 - percent / 5.0);\r\n            ctx.arc(canvasWidth / 2, canvasHeight / 2, circleRadius * .50, 0, 2 * Math.PI, false);\r\n            ctx.fill();\r\n            ctx.closePath();\r\n            ctx.restore();\r\n        }\r\n        ctx.restore();\r\n    }\r\n\r\n    // bitmap manipulation\r\n    // TODO: right now. we are looping though every pixel of the canvas (320,000 of them!), \r\n    // regardless of whether or not we are applying a pixel effect\r\n    // At some point, refactor this code so that we are looping though the image data only if\r\n    // it is necessary\r\n\r\n    // A) grab all of the pixels on the canvas and put them in the `data` array\r\n    // `imageData.data` is a `Uint8ClampedArray()` typed array that has 1.28 million elements!\r\n    // the variable `data` below is a reference to that array \r\n    let imageData = ctx.getImageData(0, 0, canvasWidth, canvasHeight);\r\n    let data = imageData.data;\r\n    let length = data.length;\r\n    let width = imageData.width;\r\n\r\n    if (params.showInvert) {\r\n        // invert? \r\n        // Iterate through each pixel, stepping 4 elements at a time (which is the RGBA for 1 pixel)\r\n        for (let i = 0; i < length; i += 4) {\r\n\r\n            let red = data[i], green = data[i + 1], blue = data[i + 2];\r\n            data[i] = 255 - red;        // set red\r\n            data[i + 1] = 255 - green;  // set green\r\n            data[i + 2] = 255 - blue;   // set blue\r\n            // data[i+3] is the alpha, but we're leaving that alone\r\n\r\n        } // end for\r\n    }\r\n\r\n    // copy image data back to canvas\r\n    ctx.putImageData(imageData, 0, 0);\r\n}\r\n\r\nconst setLayerColor = (layerNum: number, color: string) => {\r\n    console.log(allSprites);\r\n    let spriteLayer = allSprites[layerNum - 1];\r\n\r\n    for (let sprite of spriteLayer) {\r\n        sprite.color = color;\r\n    }\r\n\r\n};\r\n\r\nexport { setupCanvas, draw, setLayerColor };","/*\r\n    main.js is primarily responsible for hooking up the UI to the rest of the application \r\n    and setting up the main event loop\r\n*/\r\n\r\n// We will write the functions in this file in the traditional ES5 way\r\n// In this instance, we feel the code is more readable if written this way\r\n// If you want to re-write these as ES6 arrow functions, to be consistent with the other files, go ahead!\r\n\r\nimport * as utils from './utils';\r\nimport * as audio from './audio';\r\nimport * as canvas from './visualizer';\r\nimport { DrawParams } from './interfaces/drawParams.interface';\r\n\r\nlet paused = false;\r\n\r\nconst drawParams: DrawParams = {\r\n    useFrequencyData: true,\r\n    useWaveformData: false,\r\n    showBars: true,\r\n    showCircles: true,\r\n    showInvert: false\r\n};\r\n\r\nconst DEFAULTS = Object.seal({\r\n    defaultSound: \"media/New Adventure Theme.mp3\",\r\n    volume: 0,\r\n    impulseResponse: \"\",\r\n    distortion: 0,\r\n    hasReverb: true,\r\n    layerColors: []\r\n});\r\n\r\nconst init = () => {\r\n    utils.loadJSON(\"./data/av-data.json\", saveJSON);\r\n};\r\n\r\nconst saveJSON = (e) => {\r\n    const response = e.target.responseText;\r\n    if (!response) {\r\n        console.log(`Error in JSON response`);\r\n    }\r\n\r\n    let defaultInfo = JSON.parse(response);\r\n\r\n    document.querySelector(\"title\").innerHTML = defaultInfo.title;\r\n\r\n    let soundOptions;\r\n    ({ soundOptions } = defaultInfo);\r\n\r\n    let optionsHTML = soundOptions.map(option => { return `<option value=\"${option.url}\">${option.name}</option>` }).join(\"\");\r\n    document.querySelector(\"#select-track\").innerHTML = optionsHTML;\r\n    DEFAULTS.defaultSound = soundOptions[0].url;\r\n\r\n    DEFAULTS.volume = defaultInfo.volume;\r\n\r\n    DEFAULTS.impulseResponse = defaultInfo.impulseResponse;\r\n\r\n    DEFAULTS.hasReverb = defaultInfo.hasReverb;\r\n\r\n    drawParams.useFrequencyData = defaultInfo.useFrequency;\r\n    drawParams.useWaveformData = !defaultInfo.useFrequency;\r\n\r\n    DEFAULTS.layerColors = defaultInfo.layerStartingColors;\r\n\r\n    setupModules();\r\n};\r\n\r\nconst setupModules = () => {\r\n    audio.DEFAULTS.hasReverb = DEFAULTS.hasReverb;\r\n    audio.setupWebaudio(DEFAULTS.defaultSound, DEFAULTS.impulseResponse);\r\n    let canvasElement = document.querySelector(\"canvas\"); // hookup <canvas> element\r\n    setupUI(canvasElement);\r\n    canvas.setupCanvas(canvasElement, audio.analyserNode, DEFAULTS.layerColors);\r\n\r\n    window.onblur = () => {\r\n        paused = true;\r\n    };\r\n    window.onfocus = () => {\r\n        paused = false;\r\n        loop();\r\n    };\r\n\r\n    loop();\r\n};\r\n\r\nconst setupUI = (canvasElement: HTMLCanvasElement) => {\r\n    // A - hookup fullscreen button\r\n    const playButton = document.querySelector(\"#btn-play\") as HTMLButtonElement;\r\n    const fsButton = document.querySelector(\"#btn-fullscreen\") as HTMLButtonElement;\r\n\r\n    // add .onclick event to fullscreen button\r\n    fsButton.onclick = e => {\r\n        console.log(\"goFullscreen() called\");\r\n        utils.goFullscreen(canvasElement);\r\n    };\r\n\r\n    // Ad .onclick event to Play/Pause button\r\n    playButton.onclick = e => {\r\n        console.log(`audioCtx.state before = ${audio.audioCtx.state}`);\r\n\r\n        let playButton = e.target as HTMLButtonElement;\r\n\r\n        // Check if context is in suspended state (autoplay policy)\r\n        if (audio.audioCtx.state == \"suspended\") {\r\n            audio.audioCtx.resume();\r\n        }\r\n        console.log(`audioCtx.state after = ${audio.audioCtx.state}`);\r\n        if (playButton.dataset.playing == \"no\") {\r\n            // if track is currently paused, play it\r\n            audio.playCurrentSound();\r\n            playButton.dataset.playing = \"yes\"; // Our CSS will set teh text to \"Pause\"\r\n            // if the track IS playing, pause it\r\n        } else {\r\n            audio.pauseCurrentSound();\r\n            playButton.dataset.playing = \"no\"; /// our CSS will set the text to \"Play\"\r\n        }\r\n    };\r\n\r\n    // hookup volume slider & label \r\n    let volumeSlider = document.querySelector(\"#slider-volume\") as HTMLInputElement;\r\n    let volumeLabel = document.querySelector(\"#lbl-volume\") as HTMLSpanElement;\r\n\r\n    // add .oninput event to slider\r\n    volumeSlider.oninput = e => {\r\n        let volumeValue: number = Number((e.target as HTMLInputElement).value);\r\n\r\n        // set the gain\r\n        audio.setVolume(volumeValue);\r\n        console.log(volumeValue);\r\n        // update value of label to match value of slider \r\n        volumeLabel.innerHTML = `${Math.round((volumeValue / 2 * 100))}`;\r\n    };\r\n\r\n    // set value of label to match initial value of slider\r\n    volumeSlider.value = String(DEFAULTS.volume);\r\n    console.log(volumeSlider);\r\n    volumeSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n    // hookup track <select>\r\n    let trackSelect: HTMLSelectElement = document.querySelector(\"#select-track\") as HTMLSelectElement;\r\n    // add .onchange event to <select>\r\n    trackSelect.onchange = e => {\r\n        let selectedTrack = (e.target as HTMLSelectElement).value;\r\n\r\n        audio.loadSoundFile(selectedTrack);\r\n        // pause the current track if it is playing\r\n        if (playButton.dataset.playing == \"yes\") {\r\n            playButton.dispatchEvent(new MouseEvent(\"click\"));\r\n        }\r\n    };\r\n    trackSelect.dispatchEvent(new Event(\"change\"));\r\n\r\n    // Toggle for Frequency or Waveform data\r\n    let dataUsed = document.querySelector(\"#select-data-type\") as HTMLSelectElement;\r\n    dataUsed.onchange = e => {\r\n        let selectedDataType = (e.target as HTMLSelectElement).value;\r\n\r\n        if (selectedDataType == \"frequency\") {\r\n            drawParams.useFrequencyData = true;\r\n            drawParams.useWaveformData = false;\r\n        }\r\n        else {\r\n            drawParams.useFrequencyData = false;\r\n            drawParams.useWaveformData = true;\r\n        }\r\n    };\r\n    dataUsed.selectedIndex = (drawParams.useFrequencyData) ? 0 : 1;\r\n    dataUsed.dispatchEvent(new Event(\"change\"));\r\n\r\n    let distortionSlider = document.querySelector('#slider-distortion') as HTMLInputElement;\r\n    distortionSlider.value = `${DEFAULTS.distortion}`;\r\n    distortionSlider.onchange = e => {\r\n        let slider = e.target as HTMLInputElement;\r\n        audio.setDistortion(Number(slider.value));\r\n    };\r\n\r\n    let reverbCheckbox = document.querySelector(\"#cb-reverb\") as HTMLInputElement;\r\n    reverbCheckbox.onchange = e => {\r\n        audio.toggleReverb();\r\n    };\r\n    reverbCheckbox.checked = DEFAULTS.hasReverb;\r\n\r\n    // Checkboxes\r\n    // bars\r\n    let barsCheckBox = document.querySelector(\"#cb-bars\") as HTMLInputElement;\r\n    barsCheckBox.onchange = e => {\r\n        let checkbox = e.target as HTMLInputElement;\r\n        drawParams.showBars = checkbox.checked;\r\n    };\r\n    barsCheckBox.checked = drawParams.showBars;\r\n    // circles \r\n    let circleCheckBox = document.querySelector(\"#cb-circles\") as HTMLInputElement;\r\n    circleCheckBox.onchange = e => {\r\n        let checkbox = e.target as HTMLInputElement;\r\n        drawParams.showCircles = checkbox.checked;\r\n    };\r\n    circleCheckBox.checked = drawParams.showCircles;\r\n    // invert \r\n    let invertCheckBox = document.querySelector(\"#cb-invert\") as HTMLInputElement;\r\n    invertCheckBox.onchange = e => {\r\n        let checkbox = e.target as HTMLInputElement;\r\n        drawParams.showInvert = checkbox.checked;\r\n    };\r\n    invertCheckBox.checked = drawParams.showInvert;\r\n\r\n    // \r\n    for (let i = 1; i <= DEFAULTS.layerColors.length; i++) {\r\n        let colorSelector = document.querySelector(`#color-layer${i}`) as HTMLInputElement;\r\n        colorSelector.value = DEFAULTS.layerColors[i];\r\n\r\n        // colorSelector.oninput = e => { canvas.setLayerColor(1, (e.target as HTMLInputElement).value); };\r\n    }\r\n\r\n    (document.querySelector(\"#color-layer1\") as HTMLInputElement).oninput = e => { canvas.setLayerColor(2, (e.target as HTMLInputElement).value); };\r\n    (document.querySelector(\"#color-layer2\") as HTMLInputElement).oninput = e => { canvas.setLayerColor(3, (e.target as HTMLInputElement).value); };\r\n    (document.querySelector(\"#color-layer3\") as HTMLInputElement).oninput = e => { canvas.setLayerColor(4, (e.target as HTMLInputElement).value); };\r\n    (document.querySelector(\"#color-layer4\") as HTMLInputElement).oninput = e => { canvas.setLayerColor(1, (e.target as HTMLInputElement).value); };\r\n\r\n}; // end setupUI\r\n\r\nconst loop = () => {\r\n    if (paused)\r\n        return;\r\n\r\n    setTimeout(loop, 1000 / 60);\r\n\r\n    canvas.draw(drawParams);\r\n\r\n    // testing();\r\n};\r\n\r\nexport { init };","// mobile menu\r\nconst burgerIcon = document.querySelector(\"#burger\");\r\nconst navbarMenu = document.querySelector(\"#nav-links\");\r\n\r\nconst addNavbarBehavior = () => {\r\n    burgerIcon.addEventListener(\"click\", () => {\r\n        navbarMenu.classList.toggle(\"is-active\");\r\n    });\r\n}\r\n\r\nexport { addNavbarBehavior }","import * as main from \"./main\";\r\nimport * as navbar from \"./navbar\";\r\n\r\nwindow.onload = () => {\r\n    console.log(\"window.onload called\");\r\n    console.log(window);\r\n    // 1 - do preload here - load fonts, images, additional sounds, etc...\r\n\r\n    navbar.addNavbarBehavior();\r\n\r\n    if (window.location.href.indexOf('about') !== -1) {\r\n\r\n    }\r\n    else {\r\n        // start up app\r\n        main.init();\r\n    }\r\n\r\n\r\n}"],"names":["audioCtx","sourceNode","analyserNode","distortionFilter","reverbNode","gainNode","hasReverb","makeColor","red","green","blue","alpha","drawCircle","ctx","x","y","radius","color","scale","save","fillStyle","beginPath","arc","Math","PI","closePath","fill","restore","DEFAULTS","Object","seal","gain","numSamples","loadSoundFile","filepath","src","type","pivotX","pivotY","rotation","rotRadius","speed","assign","this","cos","sin","update","draw","canvasWidth","canvasHeight","audioData","layer1Sprites","layer2Sprites","layer3Sprites","layer4Sprites","allSprites","layerColors","setLayerColor","layerNum","console","log","paused","drawParams","useFrequencyData","useWaveformData","showBars","showCircles","showInvert","defaultSound","volume","impulseResponse","distortion","saveJSON","e","response","target","responseText","soundOptions","defaultInfo","JSON","parse","document","querySelector","innerHTML","title","optionsHTML","map","option","url","name","join","useFrequency","layerStartingColors","setupModules","filePath","impulseResponseURL","AudioContext","window","Audio","createMediaElementSource","createAnalyser","fftSize","createWaveShaper","createGain","value","convolver","createConvolver","fetch","arrayBuffer","arraybuffer","decodeAudioData","buffer","connect","destination","canvasElement","setupUI","analyserNodeRef","startLayerColors","getContext","width","height","globalCompositeOperation","Uint8Array","i","push","setupSprites","onblur","onfocus","loop","playButton","onclick","element","requestFullscreen","state","resume","dataset","playing","play","pause","volumeSlider","volumeLabel","oninput","volumeValue","Number","round","String","dispatchEvent","Event","trackSelect","onchange","selectedTrack","MouseEvent","dataUsed","selectedIndex","distortionSlider","slider","curve","amount","Float32Array","abs","makeDistortionCurve","reverbCheckbox","disconnect","checked","barsCheckBox","checkbox","circleCheckBox","invertCheckBox","length","setTimeout","params","getByteFrequencyData","getByteTimeDomainData","globalAlpha","fillRect","newScale","sprite","RADIUS","translate","percent","rotate","maxRadius","circleRadius","imageData","getImageData","data","putImageData","burgerIcon","navbarMenu","onload","callback","xhr","addEventListener","classList","toggle","location","href","indexOf","XMLHttpRequest","onerror","status","open","send"],"sourceRoot":""}